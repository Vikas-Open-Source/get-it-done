openapi: 3.0.3
info:
  title: User API
  description: API for managing users
  version: 0.0.1
servers:
  - url: '{host}/api'
    variables:
      host:
        default: http://localhost:8080
paths:
  /users/v1:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserV1'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '500':
          $ref: 'errors.yaml#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      description: Add a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserV1'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV1'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '500':
          $ref: 'errors.yaml#/components/responses/InternalServerError'
  /users/v1/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get a user by ID
      description: Retrieve a specific user by its ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV1'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '500':
          $ref: 'errors.yaml#/components/responses/InternalServerError'
    put:
      summary: Update a user
      description: Update the details of an existing user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserV1'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV1'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '500':
          $ref: 'errors.yaml#/components/responses/InternalServerError'
    delete:
      summary: Delete a user
      description: Delete a user
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '500':
          $ref: 'errors.yaml#/components/responses/InternalServerError'
components:
  schemas:
    UserV1:
      type: object
      properties:
        id:
          type: string
          example: "usr001"
          description:
        name:
          type: string
          example: "john"
        email:
          type: string
          example: "john.doe@gmail.com"
        createdTimestamp:
          type: string
          format: date-time
          example: "2024-11-22T16:29:00Z"
        updatedTimestamp:
          type: string
          format: date-time
          example: "2024-11-22T16:29:00Z"
      required:
        - id
        - name
        - email
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string