plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version '7.0.0'
}

group = 'com.thisissvikas'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	openapiGenerator
}

repositories {
	mavenCentral()
}

def openApiSpecsDir = "$rootDir/src/main/resources/openapi_specs"
def generatedCodeDir = "$buildDir/generated"

tasks.register("generateOpenApiCode") {
	group = "code generation"
	description = "Generate OpenAPI code for all specs in $openApiSpecsDir"
	doLast {
		file(openApiSpecsDir).eachFileMatch(~/openapi_(\w+)\.yaml/) { file ->
			def moduleName = file.name.replace("openapi_", "").replace(".yaml", "")
			def packageName = "com.thisissvikas.getitdone.${moduleName.toLowerCase()}"

			javaexec {
				classpath = configurations.openapiGenerator
				mainClass.set("org.openapitools.codegen.OpenAPIGenerator")
				args = [
						"generate",
						"-g", "spring",
						"-i", file.absolutePath,
						"-o", "$generatedCodeDir/${moduleName}",
						"--additional-properties=apiPackage=${packageName}.api,modelPackage=${packageName}.models,invokerPackage=${packageName}.invoker"
				]
			}
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs fileTree(dir: generatedCodeDir, include: '**/src/main/java')
		}
	}
}

compileJava {
	dependsOn tasks.named("generateOpenApiCode")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	openapiGenerator "org.openapitools:openapi-generator-cli:7.0.0"
}

tasks.named('test') {
	useJUnitPlatform()
}
